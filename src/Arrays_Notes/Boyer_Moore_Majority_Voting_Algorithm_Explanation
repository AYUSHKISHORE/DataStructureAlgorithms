Boyer-Moore Majority Voting Algorithm

To find majority element
TIME COMPLEXITY - O(2N)
SPACE COMPLEXITY - O(1)

The Boyer-Moore voting algorithm is one of the popular optimal algorithms which is used to find the majority element among the given elements that have more than N/ 2 occurrences. 
This works perfectly fine for finding the majority element which takes 2 traversals over the given elements,
 which works in O(N) time complexity and O(1) space complexity.
 
Input :{1,1,1,1,2,3,5}
Output : 1
Explanation : 1 occurs more than 3 times.
Input : {1,2,3}
Output : -1
 
 NOTE -> Inorder for algorithm to work, we need element whose occurence should be [MORE THAN N/2] times of total element present.
 
  
 
 1)if need to choose candidate = -1 and counter = 0
 2)loop across the elements 
 	a)if counter == 0 , then candidate = a[i] and increase count to 1
 	b)else 
 		i)if candidate == a[i] then increase counter by 1
 		ii)else decrease the counter by 1
 		
 3) we got the candidate
 4) loop over the elements again and count the occurence of candidate if it is more than N/2 times the return candidate else -1
 
 
 
 
 _______________________________________________________________
 
 
 We have other approach inorder to find the majority element
 
 TIME COMPLEXITY - O(nLogn)
 SPACE COMPLEXITY - O(1)
 Input :{1,1,1,1,3,2,5}
 
 1) Sort the array
 	[1,1,1,1,2,3,5]
 2) return the a[a.length/2] element; 1